AWSTemplateFormatVersion: 2010-09-09
Resources:
  #VPC
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsSupport: yes
      EnableDnsHostnames: yes

  #Internet Gateway
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  #Attachthe IG to the VPC
  IGAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet 1
  PubSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.1.0/24
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true

  #Public Subnet 2
  PubSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.2.0/24
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: true

  #Public Subnet 3
  PubSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.3.0/24
      AvailabilityZone: "us-east-1c"
      MapPublicIpOnLaunch: true

  #Public Route Table
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  #Configure Public Route
  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  #Associate Pubsubnet 1 and Route Table
  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubSubnet1

  #Associate Pubsubnet 2 and Route Table
  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubSubnet2

  #Associate Pubsubnet 1 and Route Table
  PublicSubnet3RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubSubnet3

  #Security Group for EC2
  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: Ec2-sg
      GroupDescription: Allow SSH access and HTTP
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  #Configure launch template
  LaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: LaunchTemplateLab2
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: yes
            DeleteOnTermination: yes
            Groups:
              - !Ref InstanceSecurityGroup
        ImageId: ami-0ef9b4be72ab9e1df
        InstanceType: t2.micro
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html

  #Create an ALB
  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      Subnets:
        - !Ref PubSubnet1
        - !Ref PubSubnet2
        - !Ref PubSubnet3

  #Configure ALB Target Group
  ALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      TargetType: "instance"
      HealthCheckIntervalSeconds: "30"
      HealthCheckTimeoutSeconds: "5"
      Port: "80"
      Protocol: HTTP
      VpcId: !Ref VPC

  # Configure ALB Listener
  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ALBTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ALB Listener Rule
  ALBListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions:
        - TargetGroupArn: !Ref ALBTargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - "/*"
      ListenerArn: !Ref ALBListener
      Priority: 1

  #Create an Auto Scaling Group
  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: "3"
      MinSize: "3"
      DesiredCapacity: "3"
      VPCZoneIdentifier:
        - !Ref PubSubnet1
        - !Ref PubSubnet2
        - !Ref PubSubnet3
      TargetGroupARNs:
        - !Ref ALBTargetGroup

  #Scaling Policy
  ScalingPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      ScalingAdjustment: "1"
